
碰撞检测的逻辑。
就是碰撞器，加到碰撞组里面。
碰撞组加到大容器里面。
网格是做在每个组里面的。这个项目没有什么很大的物体，都是很小的，有一个固定尺寸的网格就够了。

检测器每次执行的时候，先把网格里面的东西清空，



思路2，
一个统一的4叉树。做成自适应的。prop里面给4边和最小网格尺寸。最小网格不小于这个给定的尺寸。

加入碰撞器的时候，把碰撞器上面保存的上次的event清空。
查找的时候，做2个逻辑，1是n个碰撞器互相之间检测，n*（n-1）/2这种，这个用于末端节点内部的检测。2是n个和m个，互相检测，n*m次这种，n是末端节点，m是从根节点到末端节点之前的所有节点上的碰撞器的汇总，m和n没有交集。之后这个节点就标记为已经完成了。
如果一个节点的4个子节点，要么没有，要么都已经完成了，那么就对这个节点做上面的那个操作，相当于把这个节点当成子节点。
所有节点都标记为完成，检测就完成了。
完成以后，清空这一堆数据。

碰撞组还是有用。组除了是什么之外，还有一个一定要标记，就是组内是否碰撞。
另外以后可以考虑一下，如果静态的很多，可以做一个单独的4叉树，专门保存静态的部分。每次把动态的做好了，直接把静态的复制进去就行。不过现在先不管这个问题。

具体检测的时候，先确认碰撞组，如果碰撞组都表示不检测，就过。

碰撞只留一个碰撞event给碰撞器。之后由拥有这个碰撞器的物体自行决定怎么处理。

所以还需要一个碰撞组管理器。全局唯一，静态。这个里面要做一个事情，就是互相检查，如果两个有相互作用的碰撞组互相给对方的描述不一致，就报错。初始化的时候就可以留好。















